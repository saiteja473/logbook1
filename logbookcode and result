{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c64cae00-70e8-4068-9fdf-9b5b24baaf42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2D Array with 1 Row:\n",
      "[[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n",
      "   18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35\n",
      "   36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53\n",
      "   54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71\n",
      "   72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89\n",
      "   90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106]]\n",
      "Saved Array:\n",
      "[[  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17\n",
      "   18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35\n",
      "   36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53\n",
      "   54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71\n",
      "   72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89\n",
      "   90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106]]\n",
      "Shape Attribute Value: (1, 107)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Define the SID and calculate the number of elements\n",
    "sid = 2343107  # Replace with your SID\n",
    "last_two_digits = sid % 100\n",
    "num_elements = last_two_digits if last_two_digits >= 10 else last_two_digits + 100\n",
    "\n",
    "# 1) Create a vector with `num_elements` elements using np.arange\n",
    "a = np.arange(num_elements)\n",
    "\n",
    "# 2) Convert `a` to a 2D array with 1 row\n",
    "a_2d = a.reshape(1, -1)\n",
    "print(\"2D Array with 1 Row:\")\n",
    "print(a_2d)\n",
    "\n",
    "# 3) Save it in another array and print\n",
    "b = a_2d.copy()\n",
    "print(\"Saved Array:\")\n",
    "print(b)\n",
    "\n",
    "# 4) Check the shape attribute value\n",
    "shape_value = b.shape\n",
    "print(\"Shape Attribute Value:\", shape_value)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f39102e-9883-4085-be8e-f89636b655f1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
